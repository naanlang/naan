/*
 * psm_ghub.nlg
 * serviceGitHub
 *
 *     PSM connector for GitHub for browser and NodeJS.
 *
 * column positioning:                          //                          //                      !
 *
 * Copyright (c) 2021 by Richard C. Zulch
 *
 */


/*
 * phubConnector
 *
 *     Make a PSM connector for GitHub access.
 *
 */

closure phubConnector(psm, local connClassID, connector, watch) {
    connClassID = "GHUB"
    require("./gitops.nlg")
    connector = new(object, this)
    connector.psm = psm
    connector.vault = psm.vault(connClassID)
    connector.label = "GitHub"
    watch = psm.watchable(connector)

    // uifields
    //
    // Report the UI fields we need to add a resource
    connector.uifields = function uifields() {
        [{
            label:          "Username"
            placeholder:    "GitHub username or email"
            key:            "userName" },
        {
            label:          "Password"
            placeholder:    "Personal Access Token"
            key:            "userPat"
            type:           "password" }
        ]
    }

    // findResource
    //
    // Find a resource with the specified contents, returning the resID or false.
    connector.findResource = function findResource(resource, local resID, creds) {
        for resID in listResources().1 {
            creds = access(resID).1
            if ((!resource.label || resource.label == creds.label)
                && (!resource.userName || resource.userName == creds.userName))
                return (resID)
        }
        false
    }

    // writeResource
    //
    // Add or update credentials for a named resource. If no resID is specified this adds a new
    // resource; otherwise it updates an existing one. The resource is a dictionary comprising these
    // keys:
    //      label       - [optional] label we use for this resource
    //      userName    - GitHub user name
    //      userPat     - GitHUB Personal Access Token
    //      hidden      - [optional] don't enumerate to user
    //      locked      - [optional] don't allow user delete
    // The return value is an (error, resID) tuple. Error, if non-false, is a dictionary of field
    // keys and error diagnostic strings.
    connector.writeResource = function writeResource(resource, resID,
        local label, errors, creds, error, data) {
        // badField - test for a bad string
        function badField(str) { !string(str) || str.trim().length == 0 }

        creds = { 
            userName: resource.userName,
            userPat: resource.userPat
        }
        errors = { }
        if resource.label
            creds.label = resource.label
        else
            creds.label = resource.region.concat("-", resource.bucketName)
        if badField(creds.label)
            errors.label = "invalid label"
        else if !resID && findResource({ label: creds.label })
            errors.label = "duplicate name"
        if badField(resource.userName)
            errors.userName = "required field"
        if badField(resource.userPat)
            errors.userPat = "required field"
        if length(errors) > 0
            error = errors
        else {
            if resource.hidden
                creds.hidden = resource.hidden
            if resource.locked
                creds.locked = resource.locked
            if resID {
                `(error, data) = connector.vault.updateResource(resID, creds)
                change = { changed: [resID] }
            } else {
                resID = UUID()
                `(error, data) = connector.vault.addResource(resID, creds)
                change = { added: [resID] }
            }
            if data {
                watch.notify(connClassID, change)
                data = resID
            }
        }
        list(error, data)
    }

    // addResource
    //
    // Add a new resource, returning a standard error tuple per writeResource.
    connector.addResource = function addResource(resource) {
        writeResource(resource)
    }

    // updateResource
    //
    // Update an existing resource, returning a standard error tuple per writeResource.
    connector.updateResource = function updateResource(resID, resource) {
        writeResource(resource, resID)
    }

    // deleteResource
    //
    // Delete credentials for a resource
    connector.deleteResource = function deleteResource(resID) {
        connector.vault.deleteResource(resID)
        watch.notify(connClassID, { deleted: [resID] })
        list(false, { ok: true})
    }
        
    // listResources
    //
    // List saved resources in our database
    connector.listResources = function listResources() {
        connector.vault.listResources()
    }
    
    // info
    //
    // Return info for a resource.
    connector.info = function info(resID, local error, creds, info) {
        info = {
            classID: "GitHub"
            type: "GitHub"
            services: ["GitAPI"]
        }
        `(error, creds) = connector.vault.accessResource(resID)
        if creds {
            if creds.label
                info.name = creds.label
            if creds.locked
                info.locked = true
            if creds.hidden
                info.hidden = true
            info.where = creds.userName
        }
        list(false, info)
    }

    // access
    //
    // Return an S3 access object, which is the credentials to access an ghub S3 bucket.

    connector.access = function access(resID, local error, creds, ghub) {
        `(error, creds) = connector.vault.accessResource(resID)
        if error
            return (list(error))                                            // can't access that resource
        ghub = {
            userName:           creds.userName,
            userPat:            creds.userPat }
        list(false, ghub)
    }

    // connect
    //
    // Connect to an ghub bucket filesystem, returning a view.
    
    connector.connect = function connect(resID, service, args, local error,  ghub, gitremote, table) {
        `(error, ghub) = connector.access(resID)
        if !error
            `(error, gitremote) = GitHubOps(ghub)                           // get GitHub as a git remote
        if error
            list(error)
        else if service == "GitAPI"
            list(false, gitremote)
        else
            list(Error("unsupported service", service))
    }

    // finis
    
    psm.register(connClassID, connector)
    connector
};


/*
 * phubInit
 *
 *     Initialize the ghub module.
 *
 */

function phubInit(local manifest) {

    manifest = `(phubConnector, phubInit)

    Naan.module.build(module.id, "psm_github", function(modobj, compobj) {
        compobj.manifest = manifest
        modobj.exports.GitHubConnector = phubConnector
        Naan.module.require("./serviceGitHub.nlg")
    })
} ();
