/*
 * aws_s3.nlg
 * serviceAws
 *
 *     Access to S3 services for AWS.
 *
 * column positioning:                          //                          //                      !
 *
 * Copyright (c) 2020-2022 by Richard C. Zulch
 *
 */


/*
 * S3bucket
 *
 *     S3 buckets.
 *
 */

closure S3bucket(s3, name, local bucket) {
    bucket = new(object, this)
    bucket.name = name
    
    //
    // list
    //
    bucket.listObjects = closure listObjects(local pending) {
        pending = new(nonce)
        s3.aws.listObjectsV2({
            Bucket: bucket.name
        }, function (error, data) {
            if error
                error = Error("S3bucket.list failed", error)
            pending.signal(list(error, data))
        })
        pending.wait()
    }

    //
    // upload
    //
    bucket.upload = closure upload(key, data, local pending) {
        pending = new(nonce)
        s3.aws.upload({
            Bucket: bucket.name
            ACL: "public-read"
            Body: data
            Key: key
                ContentType: "application/octet-stream"                     // force download from browser
        })
        .on("httpUploadProgress", function(evt) {
            debuglog("upload progress", totuple(evt))
        })
        .send(function(error, data) {
            if error
                error = Error("S3bucket.upload failed", error)
            pending.signal(list(error, data))
        })
        pending.wait()
    }

    // finis
    bucket
};


/*
 * S3
 *
 *     S3 access objects.
 *
 */

closure S3(local s3) {
    s3 = new(object, this)

    //
    // login
    //
    s3.login = closure login(creds, local params) {
        if !awsSDK
            return (list(Error("S3.login: no AWS SDK available")))
        params = { }
        if creds {
            params.region = creds.region
            params.credentials = {
                accessKeyId:        creds.keyID
                secretAccessKey:    creds.keySecret
            }
        }
        s3.aws = xnew(awsSDK.S3, params)
        if awsSDK.S3Client
            s3.client = xnew(awsSDK.S3Client, params)
        `(false, { ok: true })
    }
    
    //
    // bucket
    //
    //     Return a new bucket access object for the table of the specified name. The bucket may not 
    // yet exist; see S3bucket for methods.
    //
    s3.bucket = closure bucket(name) {
        S3bucket(s3, name)
    }
    
    //
    // getSignedURL
    //
    // This obtains a pre-signed URL for the specified command and its parameters. Options control
    // how the URL is generated.
    //
    // Options:
    //  {
    //      expiresIn:        <seconds>         // default expiration is 900 (15 minutes)
    //  }
    //
    s3.getSignedURL = closure getSignedURL(cmdname, cmdparams, local command, options, pending) {
        if s3.client {
            if cmdname == "putObject"
                cmdname = "PutObjectCommand"
            else if cmdname == "getObject"
                cmdname = "GetObjectCommand"
            else
                return (list(Error("S3bucket.getSignedURL: command not present:", cmdname)))
            if cmdparams.Expires {
                cmdparams = new(cmdparams)
                options.expiresIn = cmdparams.Expires
                cmdparams.Expires = undefined
            } else
                options = { }
            command = xnew(awsSDK.s3Commands[cmdname], cmdparams)
            await(awsSDK.getSignedUrl(s3.client, command, options))
        } else {
            pending = new(nonce)
            s3.aws.getSignedUrl(cmdname, cmdparams, function(error, data) {
                pending.signal(list(error, data))
            })
            pending.wait()
        }
    }

    // finis
    s3
};


/*
 * s3Init
 *
 *     Initialize the AWS module.
 *
 */

function s3Init(local manifest) {
    manifest = `(S3bucket, S3, s3Init)

    Naan.module.build(module.id, "aws_s3", function(modobj, compobj) {
        require("./serviceAws.nlg")
        compobj.manifest = manifest
        modobj.exports.S3 = S3
    })
} ();
