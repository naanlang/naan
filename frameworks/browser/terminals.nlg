/*
 * terminals.nlg
 * Naanlib/frameworks/browser
 *
 *     Terminal access to Naan executors (execution instances.)
 *
 * column positioning:                          //                          //                      !
 *
 * Copyright (c) 2019-2024 by Richard C. Zulch
 *
 */

/*
 * globals
 *
 */

workers;


/*
 * TermHost
 *
 *     Make an Nide API Server debugger target.
 *
 * Options:
 *  {
 *      type: <string>                          // target category, e.g. "Host", "api.yyy.com"
 *      workerID: <string>                      // kind of worker in server subsystem
 *      dispatcher: <tuple>                     // dispatcher function for incoming messages
 *      startup: <dictionary>                   // startup options
 *      clientID: <string>                      // (rare) our identification on client
 *      serverID: <string>                      // (rare) server subsystem for us
 *  }
 *
 */

closure TermHost(track, api, name, options, local target, nlregex, xtarg)
{
    global(window)
    options = merge({
        type: "Host"
        workerID: "myDebugWorker"
        clientID: "DebugWorkers"
        serverID: "Workers"
    }, options)
    target = require("../running/executors.nlg").ExecutorBase(track, options.type, name)
    nlregex = RegExp("\\n", "g")
    target.workerID = options.workerID
    target.msgQueue = []
    target.dispatcher = call(options.dispatcher, function(reply) { reply })
        
    // findWorker
    //
    function findWorker(testID, local instance) {
        for instance in track.instances {
            if instance.executor.hostWorkerMatch(api, testID)
                return (instance.executor)
        }
        false
    }

    // connect
    // Connect with the host if not already connected.
    closure connect(local url, pending) {
        if target.ws
            return(list(false, { connected: true }))
        try {
            url = xnew(window.URL, api.url)
        } catch {
            return(list(Error("invalid URL ${api.url}", exception)))
        }
        if url.protocol == "https:"
            url.protocol = "wss:"
        else
            url.protocol = "ws:"
        target.ws = xnew(window.WebSocket, url.href)
        pending = new(nonce)

        // onopen
        // The WebSocket connection is now open.
        target.ws.onopen = function onopen(e, local info, spawner) {
            info = {
                name: name
                workerID: target.workerID
            }
            if options.dispatcher
                info.destID = api.instanceID                                // valid destination for relay
            target.ws.send(window.JSON.stringify({
                guid: api.guid
                init: info
            }))
            spawner = new(options.startup) || { }
            spawner.name = name
            sendControl("spawn", spawner)
            pending.signal(list(false, { ok: true }))
        }

        // onmessage
        // A message was received from the worker via WebSockets.
        target.ws.onmessage = function onmessage(e, message, local msg) {
            try {
                message = new(window.JSON.parse(e.data))
            } catch {
                if true {
                    debuglog("can't decode incoming ws message:", exception)
                    return }
            }
            if message.respOp == "msgout" {
                msg = message.payload
                if msg.id == "spawned" || msg.id == "workerlist" || msg.id == "termination"
                    return (hostWorkerUpdate(msg))
                if msg.id != "targetout" {
                    if msg.id == "status" {
                        target.lastStatus = milliseconds()
                        target.execSetStatus(msg.status)
                    }
                    if target.msgQueue {
                        if msg.id != "status"
                            target.msgQueue.push(msg)
                        return  } }
                target.doMessage(msg) }
            else if message.respOp == "error"
                debuglog("worker controller error:", ErrorString(message.payload[0]))
            else if message.respOp == "linked"
                future(function termLinked(){
                    if !target.written
                        target.term.WriteLn("(reconnected)")
                }, 1000).run()
            else if message.workerOp == "msgin" && message.payload.id == "targetin"
                dispatcher(message)                                         // request from Host
            else if message.respOp || message.id
                debuglog("unknown host response message:", message.respOp || message.id)
        }

        // dispatcher
        // Respond to a host request while preserving context to permit reply routing
        closure dispatcher(message, local reply) {
            reply = target.dispatcher(message.payload.data)
            target.ws.send(window.JSON.stringify({
                guid: api.guid
                clientID: message.clientID
                serverID: message.serverID
                workerID: message.workerID
                respOp: "msgout"
                payload: {
                    id: "targetout",
                    data: reply
                }
            }))
        }

        // onerror
        // An error occurred on the WebSocket connection.
        target.ws.onerror = function onerror(e) {
            pending.signal(list(Error("websocket failed", e)))
            debuglog("ws error")
        }
        
        // onclose
        // The WebSocket connection was closed.
        target.ws.onclose = function onclose(e) {
            if e.code != 1000 && e.code != 1001 && e.code != 1005 && e.code != 1006
                debuglog("ws close:", e.code, e.reason)
            target.execClosed(Error("socket closed", e.code, e.reason))
            target.ws = false
        }
        
        pending.wait()
    }
    
    //
    // hostWorkerUpdate
    //
    //     New workers created/discovered on this host.
    //
    function hostWorkerUpdate(msg, local localID, worker) {
        if msg.id == "spawned" {
            if !findWorker(msg.workerID)
                TermHost(track, api, msg.name, { type: options.type, workerID: msg.workerID })
        }
        else if msg.id == "termination"
            track.delete(findWorker(msg.workerID))
        else if msg.id == "workerlist" {
            for `(localID, worker) in msg.workers
                if !findWorker(localID)
                    TermHost(track, api, worker.name, { type: options.type, workerID: localID })
        }
    }
        
    //
    // hostWorkerMatch
    //
    //     True iff the specified information matches us.
    //
    target.hostWorkerMatch = function hostWorkerMatch(testApi, testID) {
        testApi === api && testID == target.workerID
    }

    //
    // doMessage
    //
    //     Process the specified undecoded message.
    target.doMessage = function doMessage(msg) {
        if msg.id == "textout" {
            target.written = true
            target.term.Write(msg.text.replace(nlregex, "\r\n")) }
        else if msg.id == "debugtext" {
            target.written = true
            target.debugWrite(msg.text, msg.level) }
        else if msg.id == "targetout"
            target.execReceived(msg.data)
        else if msg.id == "started"
            { }
        else if msg.id == "typed"
            target.term.Write(msg.text.replace(nlregex, "\r\n"))
        else if msg.id == "status"
            target.statusCB(target, msg.status)
        else if msg.id == "debugout"
            target.debugger.debugData(target, msg.data)
        else
            debuglog("unknown host worker message:", msg.id)
    }
    
    //
    // sendControl
    //
    //     Send a message to the worker controller.

    target.sendControl = function sendControl(workerOp, payload) {
        target.ws.send(window.JSON.stringify({
            guid: api.guid
            clientID: options.clientID
            serverID: options.serverID
            workerID: target.workerID
            workerOp: workerOp
            payload: payload
        }))
    }
    
    //
    // send
    //
    //     Send a message to the worker.
    
    target.send = function send(msg) {
        sendControl("msgin", msg)
    }

    //
    // oninterrupt
    //

    function oninterrupt() {
        send({                                                              // send interrupt to worker
            id: "interrupt"
        })
    }

    //
    // onreturn
    //

    function onreturn(local text) {
        text = target.term.TakeText()
        echotext(text)
        send({                                                              // send user-entered text to worker
            id: "keyline",
            text: text
        })
    }
    
    // echotext
    //
    //     Echo text to other terminals.
    
    function echotext(text) {
        sendControl("echo", {                                               // send user-entered text to worker
            id: "typed",
            text: "\x1b[90m\x1b[3m".concat(text, "\x1b[0m\n")               // dark-grey, italic
        })
    }
    
    // target.KeyText
    //
    //     Send text to the worker, with optional echo to terminal.
    
    target.KeyText = function KeyText(text, echo) {
        if echo {
            target.term.WriteLn(text.trim())
            echotext(text.trim())
        }
        send({                                                              // send user-entered text to worker
            id: "keyline",
            text: text
        })
    }

    //
    // target.PostMessage
    //
    //     Post a message to the target.
    //

    target.PostMessage = function PostMessage(data, local result) {
        result = connect()
        if result.0
            return (result)
        send({                                                              // send data to worker
            id: "targetin",
            data: data
        })
        list(false, { posted: true })
    }
    
    //
    // target.DebugCmd
    //
    //     Post a debug command to the target.
    //

    target.DebugCmd = function DebugCmd(data) {
        connect()
        send({                                                              // send debug command to worker
            id: "debugin",
            data: data
        })
    }

    //
    // target.debugWrite
    //
    //     Write a debug message to the repl.
    //
    
    target.debugWrite = function(text, level) {
        if (level >= 5)
            target.term.WriteLn(text, target.term.Cyan)                     // cyan for builtin logging
        else if (level >= 4)
            target.term.WriteLn(text, target.term.Blue)                     // blue for Naan function logging
        else if (level >= 3)
            target.term.WriteLn(text, target.term.Red)                      // light red for warnings
        else if (level >= 2)
            target.term.WriteLn(text, target.term.Green)                    // green for Naan.debug.debuglog logging
        else
            target.term.WriteLn(text, target.term.Red+target.term.Bold)     // heavy red for errors
    }

    //
    // termAttach
    //
    //     A terminal and/or debugger was attached to our instance.
    
    target.termAttach = function termAttach(repl, db, statusCB, local msg) {
        target.term = repl
        target.debugger = db
        target.statusCB = statusCB
        if target.termSaved {
            target.term.StateLoad(target.termSaved)
            target.termSaved = false }
        else
            target.term.Reset()
        target.debugger.attach(target)
        while target.msgQueue.length > 0 {
            for msg in target.msgQueue.splice(0)                            // all current messages
                target.doMessage(msg)
        }
        target.msgQueue = false
        target.term.On("interrupt", oninterrupt.proc)
        target.term.On("return", onreturn.proc)
        target.term.Focus()
        connect()                                                           // ensure we are connected
        target
    }
        
    //
    // termDetach
    //
    //     The terminal is being deattached from our instance.
    
    target.termDetach = function termDetach(repl, db) {
        target.term.On("interrupt")
        target.term.On("return")
        target.msgQueue = []
        target.debugger.detach(target)
        target.termSaved = target.term.StateSave()
        target.term.Reset()
        target.statusCB = false
        target.debugger = false
        target.term = false
    }
        
    // destroy
    //
    //     Destroy the execution instance.
    
    target.destroy = function destroy() {
        track.delete(target)
        termDetach()
        sendControl("terminate", { })
        target.ws.close(1000)                                               // 1000: normal close
    }

    xtarg = findWorker(target.workerID)
    if xtarg
        return (list(false, xtarg))                                         // already exists
    track.add(target)
    connect()                                                               // connect right away to start receiving messages

    // finis

    list(false, target)
};


/*
 * TermLocal
 *
 *     Make a local debugger target, returning a standard (error, object) tuple.
 *
 * Options:
 *  {
 *      workerID: <string>                      // kind of worker in server subsystem
 *                                              // "NaanIDE" for local IDE
 *                                              // "NaanIDE-Debug" for browser debug target
 *      startup: <dictionary>                   // startup options
 *      type: <string>                          // (rare) target category, e.g. "Local"
 *  }
 *
 */

closure TermLocal(track, name, options, local target, nlregex, listener)
{
    global(js, window, workers)
    if !dictionary(workers)
        workers = {}
    options = merge({
        type: "Local"
    }, options)
    if options.workerID == "NaanIDE" {
        if !js.t
            return (list(Error("Cannot access Local IDE executor")))
        termInstallVirtualWatcher(track, js.t)
        return (termIDE(track, name, options.workerID, js.t))               // connect to IDE execution instance itself
    }
    target = require("../running/executors.nlg").ExecutorBase(track, options.type, name)
    nlregex = RegExp("\\n", "g")
    target.workerID = options.workerID
    target.msgQueue = []
    if options.workerID == "NaanIDE-Debug" {
        target.worker = window.open(window.location.href, "_blank")
        target.worker.addEventListener("beforeunload", function(e) {        // our target is closing
            destroy()
        })
        window.addEventListener("beforeunload", function(e) {               // we are closing
            // ### tell target we are closing (if needed)
        })
        listener = window
    } else {
        if not window.Worker
            return (list(Error("Local environment does not support workers")))
        target.worker = xnew(window.Worker, "env_webworker.js")
        listener = target.worker
        target.guid = UUID()
        workers[target.guid] = target
    }

    // onmessage
    // A message was received from the worker.
    
    listener.addEventListener("message", function(e, msg) {
        msg = new(e.data)
        if msg.id == "termination" {
            destroy()
            return }
        else if msg.id != "targetout" && msg.id != "loaded" {
            if msg.id == "status" {
                target.lastStatus = milliseconds()
                target.execSetStatus(msg.status)
            }
            if target.msgQueue {
                if msg.id != "status"
                    target.msgQueue.push(msg)
                return  } }
        target.doMessage(msg)
    })

    // onerror
    // The worker had an error.
    
    target.worker.addEventListener("error", function(e) {
        debuglog("TermLocal worker error:", e.message)
        target.execClosed(Error("instance error", e.message))
    })

    //
    // oninterrupt
    //

    function oninterrupt() {
        target.worker.postMessage({                                         // send interrupt to worker
            id: "interrupt"
        })
    }

    //
    // onreturn
    //

    function onreturn() {
        target.worker.postMessage({                                         // send user-entered text to worker
            id: "keyline",
            text: target.term.TakeText()
        })
    }
        
    // target.KeyText
    //
    //     Send text to the worker, with optional echo to terminal.
    
    target.KeyText = function KeyText(text, echo) {
        if echo
            target.term.WriteLn(text.trim())
        target.worker.postMessage({                                         // send text to worker
            id: "keyline",
            text: text
        })
    }

    //
    // doMessage
    //
    //     Process the specified undecoded message.

    target.doMessage = function doMessage(msg) {
        if msg.id == "textout"
            target.term.Write(msg.text.replace(nlregex, "\r\n"))
        else if msg.id == "debugtext"
            target.debugWrite(msg.text, msg.level)
        else if msg.id == "targetout"
            target.execReceived(msg.data)
        else if msg.id == "status"
            target.statusCB(target, msg.status)
        else if msg.id == "debugout"
            target.debugger.debugData(target, msg.data)
        else if msg.id == "download"
            FileDownload(xnew(window.File, msg.bits, msg.name, msg.options))
        else if msg.id == "loaded" {
            if !target.started
                target.worker.postMessage({
                    id: "start",
                    state: false                                            // resume state, if we have any
                    altcmd: options.startup.initcmds
                })
            target.started = true
        } else if msg.id == "targetsend" {
            msg.data._guid = target.guid
            js.t.DispatchMessage(msg.data)
        }
     }
    
    //
    // target.DebugCmd
    //
    //     Post a debug command to the target.
    //

    target.DebugCmd = function DebugCmd(data) {
        target.worker.postMessage({                                         // send data to worker
            id: "debugin"
            data: data
        })
    }

    //
    // target.PostMessage
    //
    //     Post a message to the target, if it has registered a listener.
    //

    target.PostMessage = function PostMessage(data) {
        target.worker.postMessage({                                         // send data to worker
            id: "targetin",
            data: data
        })
        list(false, { posted: true })
    }
    
    //
    // target.debugWrite
    //
    //     Write a debug message to the repl.
    //
    
    target.debugWrite = function(text, level) {
        if (level >= 5)
            target.term.WriteLn(text, target.term.Cyan)                     // cyan for builtin logging
        else if (level >= 4)
            target.term.WriteLn(text, target.term.Blue)                     // blue for Naan function logging
        else if (level >= 3)
            target.term.WriteLn(text, target.term.Red)                      // light red for warnings
        else if (level >= 2)
            target.term.WriteLn(text, target.term.Green)                    // green for Naan.debug.debuglog logging
        else
            target.term.WriteLn(text, target.term.Red+target.term.Bold)     // heavy red for errors
    }
    
    //
    // termAttach
    //
    //     A terminal was attached to our instance.
    
    target.termAttach = function termAttach(repl, db, statusCB, local msg) {
        target.term = repl
        target.debugger = db
        target.statusCB = statusCB
        if target.termSaved {
            target.term.StateLoad(target.termSaved)
            target.termSaved = false }
        else
            target.term.Reset()
        target.debugger.attach(target)
        while target.msgQueue.length > 0 {
            for msg in target.msgQueue.splice(0)                            // all current messages
                target.doMessage(msg)
        }
        target.msgQueue = false
        target.term.On("interrupt", oninterrupt.proc)
        target.term.On("return", onreturn.proc)
        target.term.Focus()
        target
    }
        
    //
    // termDetach
    //
    //     The terminal is being deattached from our instance.
    
    target.termDetach = function termDetach() {
        target.term.On("interrupt")
        target.term.On("return")
        target.msgQueue = []
        target.debugger.detach(target)
        target.termSaved = target.term.StateSave()
        target.statusCB = false
        target.debugger = false
        target.term = false
    }
    
    // destroy
    //
    //     Destroy the execution instance.
    
    target.destroy = function destroy() {
        target.execClosed(Error("instance destroyed"))
        track.delete(target)
        termDetach()
        target.worker.terminate()                                           // kill without saving
        target.worker = false
    }

    track.add(target)

    // finis

    list(false, target)
};


/*
 * termMainProxy
 *
 * column positioning:                          //                          //                      !
 *     Make a browser proxy representing the main thread. This runs inside the worker and allows it
 * to do remote execution with Main.
 *
 */

closure termMainProxy(track, name, options, local target) {
    global(js)
    target = require("../running/executors.nlg").ExecutorBase(track, "mainProxy", name)
    target.name = name

    //
    // target.PostMessage
    //
    //     Post a message to the main thread.
    //
    target.PostMessage = function PostMessage(data) {
        js.t.DispatchMessage(data)
        list(false, { posted: true })
    }

    //
    // onreceive
    //
    //     Process a received message from the main thread, typically in response.
    //
    function onreceive(data) {
        target.execReceived(data)
    }
    
    // destroy
    //
    //     Destroy the execution instance.
    //
    target.destroy = function destroy() {
        target.execClosed(Error("instance destroyed"))
        track.delete(target)
    }

    js.t.OnReceive(onreceive.proc)
    track.add(target)

    // finis

    list(false, target)
};


/*
 * WorkerToMain
 *
 *     Connect our worker to the main thread, returning a result tuple with an executor representing
 * Main. Use this to create a context object for Main, allowing remote evaluation.
 *
 */

closure WorkerToMain(local nideRunning, track) {
    // mainProxy -- link tracker to main thread proxy
    function mainProxy(track, name, options) {
        termMainProxy(track, name, options)
    }

    if !js.s {
        error = Error("WorkerToMain only available in browser workers")
        return (list(error))
    }
    nideRunning = require("frameworks/running/executors.nlg")
    track = nideRunning.ExecutorTracker()
    track.register(mainProxy, "proxy")
    track.spawn("proxy")                                                    // returns result tuple
};


/*
 * findIDEtarget
 *
 *     Find a target for our IDE that matches the specified name, workerID, and naancont.
 *
 */

closure findIDEtarget(track, name, workerID, naancont, local target) {
    global()
    for target in track.enumlist()
        if target.name == name && target.workerID == workerID && (!target.naancont || target.naancont === naancont)
            return (target)
    false
};


/*
 * termIDE
 *
 *     Make an IDE debugger target. The Naan controller in this case, env_web.js, iterates through
 * all connected terminals so we just have to provide unique connection object for it to talk with.
 * This is used for both the IDE itself as well as any additional virtual website windows.
 *
 */

closure termIDE(track, name, workerID, naancont, title, local target, connected) {
    global(workers)
    target = findIDEtarget(track, name, workerID, naancont)
    if target {                                                             // new naancont on existing target
        target.updateController(naancont)
        target.title = title
        track.update(target)
        return (target)
    }
    target = require("../running/executors.nlg").ExecutorBase(track, "Local", name)
    target.name = name
    target.title = title
    target.workerID = workerID
    target.naancont = naancont
    connected = []
    
    // replyHook
    //
    //     Intercept the ReplyMessage function to see if we should handle it.
    //
    function replyHook(data) {
        if data._guid
            workers[data._guid].worker.postMessage({
                id: "targetreceive"
                data: data
            })
    }

    // target.DebugCmd
    //
    //     Post a debug command to the target, ourselves.
    //
    target.DebugCmd = function DebugCmd(data) {
        naancont.DispatchDebugger(data)
    }

    // target.PostMessage
    //
    //     Post a message to the target, ourselves.
    //
    target.PostMessage = function PostMessage(data) {
        naancont.DispatchMessage(data)
        list(false, { posted: true })
    }

    // termAttach
    //
    // Create a closure for an attaching terminal.
    //
    target.termAttach = closure termAttach(term, db, statusCB, local connection, inbound) {
        connection = new(object, this)

        function oninterrupt() {
            naancont.Interrupt(inbound)
        }

        function onreturn() {
            naancont.Return(term.TakeText(), inbound)
        }
    
        function onstatus(status) {
            target.execSetStatus(status)
            statusCB(target, status)
        }
    
        function onmessageout(data) {
            target.execReceived(data)
        }
    
        function ondebugout(data) {
            db.debugData(target, data)
        }
        
        connection.KeyText = function KeyText(text, echo) {                 // send text to instance
            if echo
                term.WriteLn(text.trim())                                   // echo to terminal
            naancont.Return(text, inbound)
        }

        connection.termActive = function termActive(active) {
            if inbound
                inbound.active = active
        }

        connection.termDetach = function termDetach() {                     // disconnect the terminal
            db.detach(target)
            term.On("interrupt")
            term.On("return")
            if inbound
                naancont.Detach(inbound)
            connected = connected.filter(function(conn) { conn !== connection })
        }

        connection.popup = true                                             // we can handle multiple terminals

        let (replstate) {
            replstate = naancont.StateGet()
            if (replstate)
                term.StateLoad(replstate)
            else
                term.Reset()
            term.On("interrupt", oninterrupt.proc)
            term.On("return", onreturn.proc)
            term.Focus()
            inbound = xnew({
                OnMessage: term.OnMessage
                StateSave: term.StateSave
                OnStatus: onstatus.proc
                OnMessageOut: onmessageout.proc
                OnDebugOut: ondebugout.proc
            })
            naancont.Attach(inbound)
            connection.inbound = inbound
            connection.db = db
            connected.push(connection)
            db.attach(target)
        } ()
        
        // finis
        connection
    }
    
    // updateController
    //
    //     Update the naan controller on this target, which means updating for all the terminals.
    //
    target.updateController = function updateController(newnc, local conn) {
        naancont = newnc
        target.naancont = newnc
        for conn in connected {
            if naancont {
                naancont.Attach(conn.inbound)                               // tell the controller about terminals
                conn.db.attach(target)                                      // re-attach since remote changed
                conn.termActive()
            } else
                conn.db.detach(target)                                      // nothing left to debug
        }
        target.execReset()                                                  // reset our parent class
    }
    
    // vsiteRefresh
    //
    //     The vsite upon which we are based has changed.
    //
    target.vsiteRefresh = function vsiteRefresh(url_origin) {
        naancont.VsiteRefresh(url_origin)
    }
    
    // destroy
    //
    //     Destroy the execution instance.
    //
    target.destroy = function destroy() {
        target.execClosed(Error("instance destroyed"))
        track.delete(target)
    }

    js.t.OnReplyHook(replyHook.proc)
    track.add(target)

    // finis

    list(false, target)
};


/*
 * termInstallVirtualWatcher
 *
 *     Install a persistent watcher to note when virtual terminals come and go, and manage their
 * execution target lifetimes.
 *
 */

closure termInstallVirtualWatcher(track, naancont) {
    global()

    function watchVsites(msg, local error, target) {
        if msg.op == "VsiteOpen" {
            `(error, target) = termIDE(track, msg.name, "NaanVsite", msg.naancont, msg.title)
            target.attention()
        }
        else if msg.op == "VsiteClose" {
            target = findIDEtarget(track, msg.name, "NaanVsite", msg.naancont)
            if target
                target.updateController()
        }
    }
    
    require("../running/executors.nlg").TaskOnMessageHook(watchVsites)
};


/*
 * termInit
 *
 *     Initialize the debugger page.
 *
 */

function termInit(local manifest) {
    manifest = `(TermHost, TermLocal, termMainProxy, WorkerToMain, findIDEtarget, termIDE,
        termInstallVirtualWatcher, termInit)

    Naan.module.build(module.id, "terminals", function(modobj, compobj) {
        require("./browser.nlg")
        compobj.manifest = manifest
        modobj.exports.TermLocal = TermLocal
        modobj.exports.TermHost = TermHost
        modobj.exports.WorkerToMain = WorkerToMain
    })
} ();
