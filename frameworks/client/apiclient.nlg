/*
 * apiclient.nlg
 * Naanlib/frameworks/client
 *
 *     Access to Nide API with HTTP client.
 *
 * column positioning:                          //                          //                      !
 *
 * Copyright (c) 2017-2022 by Richard C. Zulch
 *
 */


/*
 * MakeNideAPIclient
 *
 *     Make a DAS API client object for browsers. This client API handles a single project at a
 * time, from load() to close().
 *
 *
 */

closure MakeNideAPIclient(url, guid, local client) {
    client = new(object, this)
    client.url = url
    client.guid = guid
    client.notifyAfter = 0

    // clientRequest() - general request routine

    closure clientRequest(method, path, options, cbReq, local request) {
        request = xnew(js.w.XMLHttpRequest)
        request.addEventListener("load", function (event) {
            cbReq(false, request, event)
        })

        request.addEventListener("error", function reqFailed(event, local errtext) {
            if request.status == 0
                errtext = "connectivity"
            else
                errtext = "request failed"
            error = Error(errtext, {
                status: request.status
                method: method
                path: path
            })
            cbReq(error, request, event)
        })

        request.open(method, path)
        if options.responseType
            request.responseType = options.responseType
        if options.contentType
            request.setRequestHeader("Content-Type", options.contentType)
        if guid
            request.setRequestHeader("x-naanlang-api-guid", guid)
        request.send(options.putdata)
    }

    //
    // docs()
    //

    client.docs = closure docs() {
        clientRequest("GET", url.concat("/"), false, function (error, req, event) {
            printline(req.responseText)
        })
    }

    //
    // status(callback, timeoutMS)
    //

    client.status = closure status(cbStatus, timeoutms, local query, options, queued) {
        options = new(dictionary)
        options.timeout = timeoutms
        options.after = client.notifyAfter
        query = EncodeQuery("/status/?", options)
        clientRequest("GET", url.concat(query), false, function (error, req, event) {
            if (error || req.status != 200)
                cbStatus()
            else if (length(req.responseText) == 0)
                cbStatus([])
            else {
                queued = new(JSONparse(req.responseText))
                queued.forEach(function(item,index,array) {
                    if client.notifyAfter < item.stamp
                        client.notifyAfter = item.stamp
                })
                cbStatus(queued)
            }
        })
    }

    //
    // get
    //

    client.get = closure get(path, cbRead) {
        options.path = filepath
        clientRequest("GET", url.concat("/", path), false, cbRead)
    }

    //
    // readFile(filepath, cbRead)
    //

    client.readFile = closure readFile(filepath, cbRead, local query, options) {
        options = new(dictionary)
        options.path = filepath
        query = EncodeQuery("/readfile/?", options)
        clientRequest("GET", url.concat(query), false, cbRead)
    }

    //
    // psmRemote(options, data, callback)
    //
    // Perform an operation and call back when done. If the communication works then the result is:
    //      callback(false, (remote_error, remote_data)).
    // Otherwise if communication failed then the result is:
    //      callback(<error>).

    client.psmRemote = closure psmRemote(options, data, callback, local query, method, reqOptions, error) {
        query = EncodeQuery("/psm/?", options)
        if data
            method = "PUT"
        else
            method = "GET"
        reqOptions = {
            putdata: data
        }
        if options.encoding == "binary" {
            if data
                reqOptions.contentType = "application/octet-stream"         // we are sending binary data
            else
                reqOptions.responseType = "arraybuffer"                     // we are requesting binary data
        } else if options.encoding == "json" {
            if data {
                reqOptions.contentType = "application/json;charset=UTF-8"   // we are sending JSON
                `(error, data) = JsonStringify(data)
                if error
                    return (callback(Error("psmRemote failed:", error)))
                reqOptions.putdata = data
            }
            else
                reqOptions.responseType = "application/json"                // we are requesting JSON
        }
        clientRequest(method, url.concat(query), reqOptions, function (error, req, event, local data) {
            if !error && req.status != 200
                error = Error("NodeFS request failed: ".concat(req.status), {
                    status: req.status
                    method: method
                    query: query
                    })
            if error
                callback(error)
            else {
                if req.getResponseHeader("content-type").startsWith("application/json")
                    try {                                                   // attempt to decode JSON response
                        data = new(JSONparse(req.responseText))
                        if array(data) {
                            data = totuple(data)
                            error = data.0
                            data = data.1 }
                    } catch {
                        if true
                            data = req.responseText                         // just return text on failure
                    }
                else
                    data = req.response                                     // e.g. when reading binary content
                callback(error, data) }
        })
    }

    client
};


/*
 * apicInit
 *
 *     Initialize the apic component.
 *
 */

function apicInit(local manifest) {

    manifest = `(MakeNideAPIclient, apicInit)

    Naan.module.build(module.id, "apiclient", function(modobj, compobj) {
        Naan.module.require("./client.nlg")
        compobj.manifest = manifest
        modobj.exports.MakeNideAPIclient = MakeNideAPIclient
    })

} ();
