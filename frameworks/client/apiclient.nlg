/*
 * apiclient.nlg
 * Naanlib/frameworks/client
 *
 *     Access to Nide API with browser HTTP client.
 *
 * column positioning:                          //                          //                      !
 *
 * Copyright (c) 2017-2024 by Richard C. Zulch
 *
 */


/*
 * NideAPIclient
 *
 *     Make an API client object for browsers.
 *
 */

closure NideAPIclient(url, guid, apiRequester, local client) {
    global()
    client = new(object, this)
    if !url.match(RegExp("^https?:\/\/", "i"))
        url = "http://${url}"                                               // a protocol is required
    if url.slice(-1) != "/"
        url = url.concat("/")                                               // must end in "/"
    client.url = url
    client.guid = guid
    client.notifyAfter = 0
    client.instanceID = UUID()                                              // our client's unique ID

    // clientRequest() - append our guid to the headers

    closure clientRequest(url, options) {
        options = merge(options)
        if guid
            options.headers = [list("x-naanlang-api-guid", guid)]
        apiRequester(url, options)
    }

    //
    // docs()
    //

    client.docs = closure docs(local error, content, extra) {
        `(error, content, extra) = clientRequest(url)
        printline(content)
    }

    //
    // status(callback, timeoutMS)
    //

    client.status = closure status(cbStatus, timeoutms, local query, error, content, extra, queued) {
        query = EncodeQuery("status/?", {
            timeout: timeoutms
            after: client.notifyAfter
        })
        `(error, content, extra) = clientRequest(url.concat(query))
        if (error || extra.status != 200)
            cbStatus()
        else if (length(content) == 0)
            cbStatus([])
        else {
            queued = new(content)
            queued.forEach(function(item, index, array) {
                if client.notifyAfter < item.stamp
                    client.notifyAfter = item.stamp
            })
            cbStatus(queued)
        }
    }

    //
    // get
    //

    client.get = closure get(path, options, local error, content, extra) {
        `(error, content, extra) = clientRequest(url.concat(path))
        if !error && extra.status != 200
            error = Error("readFile failed: ".concat(extra.status), {
                    status: extra.status
                })
        if error
            list(error)
        else
            list(error, content, extra)
    }

    //
    // readFile(filepath, options)
    //

    client.readFile = closure readFile(filepath, options, local query, error, content, extra) {
        query = EncodeQuery("readfile/?", {
            path: filepath
        })
        `(error, content, extra) = clientRequest(url.concat(query), options)
        if !error && extra.status != 200
            error = Error("readFile failed: ".concat(extra.status), {
                    status: extra.status
                })
        if error
            list(error)
        else
            list(error, content, extra)
    }

    //
    // psmRemote(options, data, callback)
    //
    // Perform an operation and call back when done.

    client.psmRemote = closure psmRemote(options, data, callback, 
        local query, reqOptions, error, content, extra) {
        query = EncodeQuery("psm/?", options)
        reqOptions = {
            putdata: data
        }
        if !data
            reqOptions.encoding = options.encoding                          // expected response format
        else if options.encoding == "binary"
            reqOptions.contentType = "application/octet-stream"             // we are sending binary data
        else if options.encoding == "json" {
            reqOptions.contentType = "application/json;charset=UTF-8"       // we are sending JSON
            `(error, data) = JsonStringify(data)
            if error
                return (callback(Error("psmRemote encoding failed:", error)))
            reqOptions.putdata = data
        }
        `(error, content, extra) = clientRequest(url.concat(query), reqOptions)
        if !error && extra.status != 200
            error = Error("NodeFS request failed: ".concat(extra.status), {
                    status: extra.status
                })
        if error
            callback(error)
        else
            callback(error, content)
    }

    client
};


/*
 * apicInit
 *
 *     Initialize the apic component.
 *
 */

function apicInit(local manifest) {

    manifest = `(NideAPIclient, apicInit)

    Naan.module.build(module.id, "apiclient", function(modobj, compobj) {
        Naan.module.require("./client.nlg")
        compobj.manifest = manifest
        modobj.exports.NideAPIclient = NideAPIclient
    })

} ();
