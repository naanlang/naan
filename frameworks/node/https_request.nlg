/*
 * https_request.nlg
 *
 *     Https operations for NodeJS.
 *
 * column positioning:                          //                          //                      !
 *
 * Copyright (c) 2021-2024 by Richard C. Zulch
 *
 */


/*
 * httpsApiReqOnce
 *
 * Perform an API request from NodeJS. This operates the same as HttpsApiRequest for browsers.
 *
 * Options:
 *  {
 *      method:         <string>                // HTTP method (defaults to GET/PUT)
 *      query:          <dictionary>            // query variables added to the URL
 *      putdata:        <data>                  // data to put
 *      contentType:    <string>                // sets Content-Type header, otherwise auto-determined
 *      range:          <string>                // sets range header
 *      headers:        [`(key, value)]         // add header(s) to the request, overriding defaults
 *      auth:           <string>                // username:password string
 *      cacert:         <data>                  // deprecated: ca for verifying peer
 *      ssl: {
 *          ca:         <data>                  // replacemenet certificate authority or self-signed cert
 *          cert:       <data>
 *          key:        <data>
 *          passphrase: <data>                  // optional
 *      }
 *      allowSelfSigned: <boolean>              // allow a self-signed certificate at the server
 *      streamHook:     <proc>                  // called for incoming chunks of text/event-stream
 *      debug:          <boolean>               // log errors and status results
 *  }
 *
 * The return is a result tuple comprising:
 *      (<error>,                               -- false on success
 *      <content>,                              -- returned data
 *      {
 *          status:     <integer>               -- http response status
 *          headers:    <array>                 -- headers if available
 *      })
 *
 */

closure httpsApiReqOnce(url, options,
    local urlq, reqOptions, putdata, error, item, xurl, pending, chunks, request) {
    global(js, nodeHttps, nodeUrl)
    if options.query
        urlq = url.concat(EncodeQuery("?", options.query))
    else
        urlq = url
    putdata = options.putdata
    reqOptions = { }
    if options.method
        reqOptions.method = options.method
    else if putdata
        reqOptions.method = "POST"
    else
        reqOptions.method = "GET"
    reqOptions.headers = { }
    if putdata {
        if options.contentType
            reqOptions.headers['Content-Type'] = options.contentType
        else if jsTypedArray(options.putdata)
            reqOptions.headers['Content-Type'] = "application/octet-stream"
        else if member(typeof(options.putdata), `(dictionary, array, xobject)) {
            reqOptions.headers['Content-Type'] = "application/json"
            `(error, putdata) = JsonStringify(options.putdata)
            if error
                return (list(Error("HttpsApiRequest encode:", url)))
        }
        reqOptions.body = putdata
    }
    if array(options.headers)
        for item in options.headers
            reqOptions.headers[item.0] = item.1
    if options.auth
        reqOptions.auth = options.auth
    if options.allowSelfSigned {
        xurl = nodeUrl.parse(url)
        reqOptions.agent = xnew(nodeHttps.Agent({
            host: xurl.hostname
            port: xurl.port
            path: xurl.path
            rejectUnauthorized: false
            // keepAlive: false
            ca: options.ssl.ca || options.cacert || [ selfSignedRootCaPemCrtBuffer ]
            cert: options.ssl.cert || undefined
            key: options.ssl.key || undefined
            passphrase: options.ssl.passphrase || undefined
        }))
    } else {
        reqOptions.ca = options.ssl.ca || options.cacert || undefined
        reqOptions.cert = options.ssl.cert || undefined
        reqOptions.key = options.ssl.key || undefined
        reqOptions.passphrase = options.ssl.passphrase || undefined
    }
    pending = new(nonce)
    chunks = []
    request = nodeHttps.request(url, reqOptions, closure (response) {
        // test if response is a SSE stream
        function stream() { response.headers["content-type"].startsWith("text/event-stream") }

        response.on("data", function (chunk) {
            if options.streamHook && stream()
                call(options.streamHook, chunk)                             // got some data
            else
                chunks.push(chunk)
        })
        response.on("end", function (local state, content, error, headers) {
            state = {
                headers: response.headers
                status: response.statusCode
                contentType: response.headers["content-type"]
                complete: response.complete
            }
            if options.streamHook && stream()
                call(options.streamHook, false, state)                      // no more data
            else
                content = js.g.Buffer.concat(chunks)
            if response.statusCode < 200 || response.statusCode >= 299 {    // 299 is "cancelled"
                if options.debug
                    debuglog("HttpsApiRequest status:", url, response.statusCode, "message:", content)
                pending.signal(list(Error("HttpsApiRequest statusCode:", url, response.statusCode, {
                    status: response.statusCode
                }), false, {
                    headers: response.headers
                    status: response.statusCode
                }))
                return
            }
            if response.complete {
                if response.headers["content-type"].startsWith("application/json") {
                    `(error, content) = JsonParse(content.toString())
                    if error
                        error = Error("HttpsApiRequest decode:", url, error)
                    else
                        content = new(content)
                    if array(content) {                                     // naan: decapsulate to get API result
                        content = totuple(content)
                        error = content.0
                        content = content.1
                    }
                }
            }
            else
                error = Error("HttpsApiRequest terminated prematurely:", url, response.statusCode)
            pending.signal(list(error, content, state))
        })
    })
    request.on("error", function hre(error) {
        if options.debug
            debuglog("HttpsApiRequest error:", url, "error:", error)
        error = Error("HttpsApiRequest failed:", url, error)
        pending.signal(list(error))
    })
    if putdata
        request.write(putdata)
    request.end()
    pending.wait()
};


/*
 * sseParserFactory
 *
 * Returns an Server-Sent Events parser that calls the specified message procedure each time an event
 * is recognized. Call the returned parser object's write method to add data for parsing.
 *
 */

closure sseParserFactory(message, local parser) {
    global()
    parser = new(object, this)
    parser.buffer = ""
    parser.eomrx = RegExp("(?:\\r(?!\\n)|\\r\\n|\\n){2}")
    parser.eolrx = RegExp("(?:\\r(?!\\n)|\\r\\n|\\n){1}")
    parser.divrx = RegExp("([^:]*)[:] ?(.*)")

    // write
    //
    // Add a string to the parser input, calling message for any completed messages.
    //
    parser.write = function write(text,
        local messages, msg, output, line, found, field, value) {
        parser.buffer = parser.buffer.concat(text)
        messages = parser.buffer.split(parser.eomrx)
        loop {
            msg = messages.shift()
            if messages.length == 0 {
                parser.buffer = msg
                break
            }
            output = { }
            for line in msg.split(parser.eolrx) {
                found = line.match(parser.divrx)
                if found {
                    field = found.1
                    value = found.2
                } else {
                    field = line
                    value = ""
                }
                if field == "data" {
                    if output.data
                        output.data = output.data.concat("\n", value)
                    else
                        output.data = value
                }
                else if field == "event"
                    output.type = value
                else if field == "id"
                    output.lastEventID = value
            }
            call(message, output)
        }
    }

    // finis
    parser
};


/*
 * HttpsApiRequest
 *
 * Make the request with optional retry logic.
 *
 * Options:
 *  {
 *      retrier: function(error) { error.status == 502 }                    // retry 502 errors
 *      sseHook: function(msg) { }                                          // process SSE messages
 *  }
 *
 */

closure HttpsApiRequest(url, options,
    local delayf, parser, decoder, error, content, status) {
    global(stringDecoder, common)
    //
    // defRetrier -- backoff and retry selected errors
    //
    function defRetrier(error, headers, local retryAfter, retryms, waitms) {
        if member(error.status, `(408, 500, 502, 503, 504)) {               // retriable errors
            retryAfter = headers["retry-after"]
            if retryAfter {
                retryms = toint(retryAfter) * 1000
                if !retryms
                    retryms = Date(retryAfter).getTime() - Date.now()
                if retryms < 0
                    retryms = false
            }
            if !delayf
                delayf = common.ExbackFactory(12,30)                        // 12s max backoff, 30s deadline
            waitms = delayf()
            if !waitms || waitms < retryms
                waitms = retryms
            if options.debug
                debuglog("HttpsApiRequest.defRetrier: wait ${waitms} msec using retry-after ${retryAfter}")
            if waitms                                                       // return false to give up
                sleep(waitms)                                               // return true from sleep to retry
        }
    }

    options = merge({ retrier: defRetrier }, options)
    if options.sseHook {
        parser = sseParserFactory(options.sseHook)
        decoder = xnew(stringDecoder.StringDecoder, "utf8")
        options = merge({
            streamHook: function(chunk) {
                if chunk
                    parser.write(decoder.write(chunk))                      // data arrived
                else
                    parser.write(decoder.end())                             // end of data
            }
        }, options)
    }
    loop {
        `(error, content, status) = httpsApiReqOnce(url, options)
        if error && error.status {                                          // check for retries
            if !options.retrier(error, status.headers)
                break
        } else
            break
    }
    list(error, content, status)
};


/*
 * https_nodeInit
 *
 * Initialize HTTPS request operations for NodeJS.
 *
 */

function https_nodeInit(local manifest) {
    manifest = `(httpsApiReqOnce, sseParserFactory, HttpsApiRequest, https_nodeInit)

    Naan.module.build(module.id, "https_request", function(modobj, compobj) {
        require("./node.nlg")
        common = require("../common/utils.nlg")
        compobj.manifest = manifest
        modobj.exports.HttpsApiRequest = HttpsApiRequest
    })
}();
