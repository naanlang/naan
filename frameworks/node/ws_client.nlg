/*
 * ws_client.nlg
 *
 *     WebSocket client operations for NodeJS.
 *
 * column positioning:                          //                          //                      !
 *
 * Copyright (c) 2023-2024 by Richard C. Zulch
 *
 */


/*
 * WebSocket
 *
 * Create a WebSocket client connection object using the existing HTTPS connection.
 *
 * Required:
 *      host:       <string>                    // host:port
 *
 * Options:
 *  {
 *      wss:        <boolean>                   // true to use secure connection
 *      onopen:     <proc>(e)                   // connection has opened
 *      onmessage:  <proc>(e, message)          // message received
 *      onerror:    <proc>(e)                   // error occurred
 *      onclose:    <proc>(e)                   // connection has closed
 *      query:      <string>                    // query string starting with ? for insecure connections
 *      querys:     <string>                    // query string starting with ? for secure connections
 *  }
 *
 */

closure WebSocket(host, options, local wsock) {
    global(js)
    wsock = new(object, this)
    options = new(options) || { }

    // connect
    //
    // Connect with the host if not already connected, returning a result tuple.
    //
    wsock.connect = closure connect(local error, ws, url, pending) {
        if wsock.ws
            return (list(false, { open: true }))
        `(error, ws) = await(js.i("ws"))
        if error
            return (list(error))
        if options.wss
            url = "wss://${host}${options.querys||''}"
        else
            url = "ws://${host}${options.query||''}"
        wsock.ws = xnew(ws.default, url)
        pending = new(nonce)

        // onopen
        // The WebSocket connection is now open.
        wsock.ws.onopen = closure onopen(e) {
            pending.signal(list(false, { ok: true }))
            options.onopen(e, e.target, e.type)
        }

        // onmessage
        // A message was received from the worker via WebSockets.
        wsock.ws.onmessage = closure onmessage(e, local message) {
            try {
                message = new(JSONparse(e.data))
            } catch {
                debuglog("can't decode incoming ws message:", exception)
                options.onerror(Error("can't decode incoming message:", exception))
                return
            }
            options.onmessage(e, message)
        }

        // onerror
        // An error occurred on the WebSocket connection.
        wsock.ws.onerror = closure onerror(e, local error) {
            error = Error("websocket failed", e)
            options.onerror(e, error)
            pending.signal(list(error))                                     // ensure connect completes
        }

        // onclose
        // The WebSocket connection was closed.
        wsock.ws.onclose = closure onclose(e) {
            options.onclose(e, e.code, e.reason)
            pending.signal(list(Error("connection closed")))                // ensure connect completes
            wsock.ws = false
        }

        pending.wait()
    }

    // send
    //
    //     Send a message dictionary.
    //
    wsock.send = function send(message) {
        wsock.ws.send(JSONstringify(message))
    }

    // close
    //
    //     Close the connection.
    //
    wsock.close = function close(reason) {
        if !reason
            reason = 1000                                                   // normal close
        wsock.ws.close(reason)
    }

    // finis

    wsock
};


/*
 * ws_clientInit
 *
 *     Initialize WebSocket client operations for browsers.
 *
 */

function ws_clientInit(local manifest) {
    manifest = `(WebSocket, ws_clientInit)

    Naan.module.build(module.id, "ws_client", function(modobj, compobj) {
        require("node.nlg")
        compobj.manifest = manifest
        modobj.exports.WebSocket = WebSocket
    })
}();
