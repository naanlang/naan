/*
 * running.nlg
 * Naanlib/frameworks/running
 *
 *     Root compoment for running execution instances.
 *
 * column positioning:                          //                          //                      !
 *
 * Copyright (c) 2021-2024 by Richard C. Zulch
 *
 */


/*
 * rootproc
 *
 *     Return the root procdef of the specified procdef.
 *
 */

function rootproc(procdef, local parent) {
    global()
    loop {                                                                  // can only find out proc
        parent = procdef.1@\.parent
        if !parent
            break
        procdef = parent.proc
    }
    procdef
};


/*
 * baseproc
 *
 *     Return the base procdef if a closure or macro, or the procedure symbol itself otherwise.
 * The base is the original procedure from which a closure or macro is instantiated.
 *
 */

function baseproc(procdef) {
    global()
    if procdef.1@\.base.proc
        { }
    else
        procdef
};


/*
 * pathmatch
 *
 *     Given a parent symbol and a tuple of child procedures within it, return the child procedure
 * named by the path in the tuple. Each element in the child procedures is either a symbol == to the
 * procedure or, in the case of lambdas, a tuple comprising the procedure symbol and an integer
 * specifying the nth matching child. This is necessary because a procedure can have any number of
 * children named lambda, and we need to pick the right ones even though we don't have identical
 * symbols.
 *
 */

function pathmatch(parent, path, local segment, nth, child) {
    global()
    if empty(path)
        return (parent)
    segment = pop(path)
    if tuple(segment) {                                                     // select nth instance of matching symbol
        nth = segment.1
        segment = segment.0
    } else
        nth = 0
    for child in parent@\.children
        if child == segment && nth-- == 0
            return (pathmatch(child, path))
    false
};


/*
 * procpath
 *
 *     Return a tuple of parent prcoedure symbols for the specified child procedure. Note that this
 * path includes the parent but pathmatch above requires the parent as a separate argument. As noted
 * above, the segments of the path are either a procedure symbol, or a tuple of symbol and integer.
 *
 */

function procpath(procdef, local path, segment, parent, peers, nth, peer) {
    global()
    loop {
        segment = procdef.1
        parent = segment@\.parent
        if segment == lambda && parent {                                    // lambdas all have same name
            peers = parent@\.children
            nth = 0
            for peer in peers {
                if peer === segment
                    break
                if peer == segment
                    ++nth
            }
            push(list(segment, nth), path)                                  // we are the nth of the matching ones
        } else
            push(segment, path)
        if !parent
            break
        procdef = parent.proc
    }
    path
};


/*
 * procname
 *
 *     Return the full name of possibly-nested procedure.
 *
 */

function procname(name, local parent) {
    global()
    parent = name@\.parent
    name = tostring(name)
    if parent
        procname(parent).concat(".", name)
    else
        name
};


/*
 * procstring
 *
 *     Return a string representing a procedure and its parameters.
 * Options:
 *  {
 *      fullname: true                                                      // list name path for nested procedures
 *      namespace: true                                                     // prepend name with namespace
 *  }
 *
 */
    
function procstring(procdef, options, local name, output, parm) {
    global()
    if options.fullname || !defined(options, `fullname)
        name = procname(procdef.1)                                          // default is full name
    else
        name = procdef.1
    if options.namespace || !defined(options, `namespace)                   // default includes namespace
        name = procdef.1.namespace.tostring.concat("::", name)
    if !procdef.2 || !car(procdef.2)
        return (tostring(procdef.0).concat(" ", name, "()"))
    if atom(procdef.2)
        return (tostring(procdef.0).concat(" ", name, " ", procdef.2))
    output = tostring(procdef.0).concat(" ", name, "(")
    for parm in procdef.2 {
        if !parm
            break
        output = output.concat(parm, ", ") }
    output = output.slice(0,-2)
    output.concat(")")
}


/*
 * packageCoder
 *
 *     Encode and decode objects for the NaaN packager to establish proxies for remote access.
 *
 */

closure packageCoder(evalf, local coder) {
    global()
    coder = new(object, this)
    coder.wmapEncoding = new(weakmap)
    coder.mapDecoding = { }

    // encodeObject
    //
    // Encode an object into the ident dictionary so that the remote end can create a proxy.
    //
    coder.encodeObject = closure encodeObject(obj, local objectID) {
        if coder.wmapEncoding[obj]
            { }
        else {
            objectID = UUID()
            coder.mapDecoding[objectID] = obj
            coder.wmapEncoding[obj] = {
                name: obj@\.closure || undefined
                objectID: objectID
            }
        }
    }

    // decodeObject
    //
    // Decode the ident dictionary into a proxy object allowing method invocation.
    //
    coder.decodeObject = closure decodeObject(ident, local x, obj) {
        if coder.mapDecoding[ident.objectID]
            { }
        else if ident.name {
            putproc(ident.name, false)
            obj = coder.mapDecoding[ident.objectID] = closure(nn, objectID) {
                call(enclose(list(`closure, nn, list(`local, `x),
                    quote(x=new(object, nn)),
                    quote(x@\.tostring = function() { "{proxy ${nn}}" }),
                    quote(x@\.undefined = closure undef args {
                        let (result) {
                            result = evalf(list(`\.execute\-method, objectID, args))
                            if result.0
                                throw("remoting failure: ${ErrorString(result.0)}")
                            else
                                result.1
                        } ()
                    }), `x)))
            } (ident.name, ident.objectID)
            coder.wmapEncoding[obj] = ident
            obj
        } else
            coder.mapDecoding[ident.objectID] = new(object)
    }
    
    // invokeMethod
    //
    // Invoke a local object method from the remote proxy, returning a result tuple.
    //
    coder.invokeMethod = closure invokeMethod(objectID, args, local obj) {
        obj = coder.mapDecoding[objectID]
        if obj
            eval(list(deref, obj, pop(args), args))
        else
            throw("remoting error: object ${objectID} not found")
    }

    // finis
    coder
};


/*
 * runnInit
 *
 *     Initialize the module.
 *
 */

function runnInit(local manifest) {
    manifest = `(rootproc, baseproc, pathmatch, procpath, procname, procstring, packageCoder,
        runnInit)
    Naan.module.build(module.id, "running", closure(modobj, compobj) {
        require("../common").LiveImport()
        compobj.manifest = manifest
    })
} ();
